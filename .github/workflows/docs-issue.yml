name: Create documentation ticket

on:
  pull_request_target:
    branches:
      - main
    types:
      - closed

jobs:
  create-docs-ticket:
    runs-on: ubuntu-22.04
    steps:
      - name: Create Issue
        id: create-issue
        if: github.event.pull_request.merged && contains(github.event.pull_request.labels.*.name, 'DocumentationNeeded')
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.ISSUE_PAT }}
          script: |
            const ISSUE_REPO_NAME = 'test-private';

            const body = `_This issue was auto-generated_\n\n` +
              `PR: ${context.payload.pull_request.html_url}\n` +
              `Author: ${context.payload.pull_request.user.login}\n\n` +
              '## Original PR Body\n\n' +
              context.payload.pull_request.body;

            const howToPromise = github.rest.issues.create({
              owner: context.repo.owner,
              repo: ISSUE_REPO_NAME,
              title: `HOW-TO: ${context.payload.pull_request.title}`,
              body,
              labels: ['how-to', 'documentation', 'triage', 'autogenerated']
            });

            const conceptualPromise = github.rest.issues.create({
              owner: context.repo.owner,
              repo: ISSUE_REPO_NAME,
              title: `CONCEPTUAL: ${context.payload.pull_request.title}`,
              body,
              labels: ['conceptual', 'documentation', 'triage', 'autogenerated']
            });

            const referencePromise = github.rest.issues.create({
              owner: context.repo.owner,
              repo: ISSUE_REPO_NAME,
              title: `REFERENCE: ${context.payload.pull_request.title}`,
              body,
              labels: ['reference', 'documentation', 'triage', 'autogenerated']
            });

            const blogPromise = github.rest.issues.create({
              owner: context.repo.owner,
              repo: ISSUE_REPO_NAME,
              title: `BLOG: ${context.payload.pull_request.title}`,
              body,
              labels: ['blog', 'documentation', 'triage', 'autogenerated']
            });

            const [howToIssue, conceptualIssue, referenceIssue, blogIssue] = await Promise.allSettled([howToPromise, conceptualPromise, referencePromise, blogPromise]);

            const getIssueLink = ({ status, value, reason }) => status === 'fulfilled' ? value.data.html_url : `Failed to create issue: ${reason}`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Labels indicate documentation is required. Issues for documentation have been opened\n\n' +
                `How-To: ${getIssueLink(howToIssue)}\n` + 
                `Conceptual: ${getIssueLink(conceptualIssue)}\n` + 
                `Reference: ${getIssueLink(referenceIssue)}\n` +
                `Blog: ${getIssueLink(blogIssue)}`
            });
